/*
Project: Mentors Academy
Copyright Â© 2018 Solution Zone, LLC.. All rights reserved.
Author: John K Johansen

Description: Mentors Academy is a self-publishing site where students can share academic papers and discoveries.

Details: The implementation of Mentors Academy


*/



using Academy.Mentors.Models; 
using Academy.Mentors.Api.Logging; 
using Microsoft.AspNetCore.Authentication.JwtBearer; 
using Microsoft.AspNetCore.Authorization; 
using Microsoft.AspNetCore.Builder; 
using Microsoft.AspNetCore.Hosting; 
using Microsoft.AspNetCore.Mvc.Authorization; 
using Microsoft.Extensions.Configuration; 
using Microsoft.Extensions.DependencyInjection; 
using Microsoft.Extensions.Logging; 
using Microsoft.IdentityModel.Tokens; 
using Microsoft.EntityFrameworkCore; 
using Newtonsoft.Json.Serialization; 
// using Microsoft.EntityFrameworkCore.SqlServer; 
using Swashbuckle.AspNetCore.Swagger; 
using System; 
using System.IO; 
using System.Text; 

namespace Academy.Mentors.Api 
{ 
    /// <summary> 
    /// API 
    /// OpenAPI spec version: 1.5.0 
    /// 
    /// Generated by: https://github.com/swagger-api/swagger-codegen.git    
    /// </summary> 
    public class Startup 
    { 
        private readonly IHostingEnvironment _hostingEnv; 
        private static string SecretKey = "Dummy Secret Key To replace"; 
        // private static string SecretKey = System.Environment.GetEnvironmentVariable("Api_Signer_Key");  
        private readonly SymmetricSecurityKey _signingKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(SecretKey)); 

        /// <summary> 
        /// Configuration 
        /// </summary> 
        public IConfigurationRoot Configuration { get; } 

        /// <summary> 
        /// Startup Constructor 
        /// </summary> 
        /// <param name="env"></param> 
        public Startup(IHostingEnvironment env) 
        { 
            _hostingEnv = env; 

            var builder = new ConfigurationBuilder() 
                .SetBasePath(env.ContentRootPath) 
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true) 
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true) 
                .AddEnvironmentVariables(); 
            Configuration = builder.Build(); 

            var overrideKey = Configuration.GetSection("EnvironmentOptions")["Api_Signer_Key"]; 
            if (overrideKey != null) 
            { 
                SecretKey = overrideKey; 
                _signingKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(SecretKey)); 
            } 
        } 

        /// <summary> 
        /// This method gets called by the runtime. Use this method to add services to the container. 
        /// </summary> 
        /// <param name="services"></param> 
        public void ConfigureServices(IServiceCollection services) 
        { 
            services.AddOptions(); 

            // Get options from app settings 
            var jwtAppSettingOptions = Configuration.GetSection(nameof(JwtIssuerOptions)); 
            var sesAppSettingOptions = Configuration.GetSection(nameof(AwsSesOptions)); 
            var sendGridAppSettingOptions = Configuration.GetSection(nameof(SendGridOptions)); 

            // Configure JwtIssuerOptions    
            services.Configure<JwtIssuerOptions>(options => 
            { 
                options.Issuer = jwtAppSettingOptions[nameof(JwtIssuerOptions.Issuer)]; 
                options.Audience = jwtAppSettingOptions[nameof(JwtIssuerOptions.Audience)]; 
                options.Api_Signer_Key = jwtAppSettingOptions[nameof(JwtIssuerOptions.Api_Signer_Key)]; 
                options.SigningCredentials = new SigningCredentials(_signingKey, SecurityAlgorithms.HmacSha256); 
            }); 

            // Set up ASP.NET Core 2.X JWT Bearer Authentication (this is not used in ASP.NET 1.X)
            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                    .AddJwtBearer(options => {
                        options.TokenValidationParameters =
                             new TokenValidationParameters
                             {
                                 ValidateIssuer = true,
                                 ValidateAudience = true,
                                 ValidateLifetime = true,
                                 ValidateIssuerSigningKey = true,

                                 ValidIssuer = jwtAppSettingOptions["Issuer"],
                                 ValidAudience = jwtAppSettingOptions["Audience"],
                                 IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(jwtAppSettingOptions["Api_Signer_Key"]))
                             };
                    });

            // Configure AWS SES options for sending email 
            services.Configure<AwsSesOptions>(options => 
            { 
                options.smtpUser = sesAppSettingOptions["SMTP_USER"]; 
                options.smtpPass = sesAppSettingOptions["SMTP_PASS"]; 
                options.smtpPort = sesAppSettingOptions["SMTP_PORT"]; 
                options.smtpHost = sesAppSettingOptions["SMTP_HOST"]; 
                options.smtpFrom = sesAppSettingOptions["SMTP_FROM"]; 
            }); 

            //Configure SendGrid options for sending email. To replace AWS SES 
            services.Configure<SendGridOptions>(options => 
            { 
                options.ApiKey = sendGridAppSettingOptions["ApiKey"]; 
                options.From = sendGridAppSettingOptions["From"]; 
            }); 

            var connectionString = ConfigurationExtensions.GetConnectionString(this.Configuration, "MentorsAcademyDatabase"); 
            services.AddDbContext<ApiDataContext>(options => 
            { 
                options.UseSqlServer(connectionString); 
            }); 

            var logConnectionString = ConfigurationExtensions.GetConnectionString(this.Configuration, "MentorsAcademyLogDatabase"); 
            services.AddDbContext<LogDataContext>(options => 
            { 
                options.UseSqlServer(logConnectionString); 
            }); 

            // Make authentication compulsory across the board (i.e. shut 
            // down EVERYTHING unless explicitly opened up). 
            services.AddMvc(config => 
            { 
                var policy = new AuthorizationPolicyBuilder() 
                                 .RequireAuthenticatedUser() 
                                 .Build(); 
                config.Filters.Add(new AuthorizeFilter(policy)); 
            }) 
                //    https://docs.microsoft.com/en-us/ef/core/querying/related-data 
                .AddJsonOptions( 
                    opts => { opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); 
                              opts.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore; 
                              opts.SerializerSettings.CheckAdditionalContent = true; 
                    }); 

            services.ConfigureSwaggerGen(options => 
            { 
                options.OperationFilter<AuthorizationHeaderParameterOperationFilter>(); 
            }); 

            services.AddSwaggerGen(c => 
            { 
                c.SwaggerDoc("v1", 
                    new Info 
                    { 
                        Title = "Academy.Mentors API - V1", 
                        Version = "v1" 
                    } 
                 ); 

                var filePath = Path.Combine(AppContext.BaseDirectory, "Academy.Mentors.Api.xml"); 
                c.IncludeXmlComments(filePath); 
            }); 

            services.AddAuthorization(options => 
            { 
                options.AddPolicy("Academy.MentorsUser", 
                                  policy => policy.RequireClaim("Academy.MentorsCharacter", "IAmAAcademy.MentorsUser")); 
            }); 
        } 
        /// <summary> 
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
        /// </summary> 
        /// <param name="app"></param> 
        /// <param name="env"></param> 
        /// <param name="loggerFactory"></param> 
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) 
        { 
            loggerFactory.AddConsole(Configuration.GetSection("Logging")); 
            loggerFactory.AddDebug(); 
            loggerFactory.AddContext(LogLevel.Information, Configuration.GetConnectionString("MentorsAcademyLogDatabase")); 

            var jwtAppSettingOptions = Configuration.GetSection(nameof(JwtIssuerOptions)); 
            var connectionString = ConfigurationExtensions.GetConnectionString(this.Configuration, "MentorsAcademyLogDatabase");
            if (!String.IsNullOrEmpty(connectionString))
                app.UseLoggingMiddleware(new LoggingMiddlewareOptions { _connectionString = connectionString });

            app.UseAuthentication();

            app.UseMvc(); 

            app.UseDefaultFiles(); 
            app.UseStaticFiles(); 
            app.UseSwagger(); 
            app.UseSwaggerUI(c => 
            { 
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Academy.Mentors API V1"); 
                c.DocExpansion("none"); 
            }); 
        } 
    } 
} 
